---
title-block-banner: cropped.jpg
title: Astronomy Database 
date: October 9, 2023
authors: üåü Uma Manicka & Celeste Olmstead üåü
format:
    html:
        theme: cyborg
        toc: false
        embed-resources: true
        linkcolor: pink
---



#### ü™êProject Overviewü™ê 


See:

* [GITHUB REPO](https://github.com/cmsc-vcu/cmsc508-fa2023-prj-astronomy_database_group53)
* [PITCH VIDEO](https://clipchamp.com/watch/5yb3Z2ORm1g?utm_source=share&utm_medium=social&utm_campaign=watch)
* [DESIGN VIDEO]()


#### Problem Description

Problem domain
: provide a summary of the problem domain, providing context, scope of the area. For example, one might talk about the building murals in Richmond, and provide a bit of history (or pictures), so that someone understands the problem domain.

Need
: provide a summary of why a database is needed and what problem it might help solve. Why does this database need to be developed?

Context, scope, and perspective
: Who is the DB for, or what perspective will the DB represent? In the domain of sports teams, is the database for the coach, team owner, player, or fan?

User roles and use cases
: Identify the different user roles that will interact with the database. Describe their needs and how they will use the database. How will the database be used? Who will be using it? How will they be using it? How will the database be connected to other things?

Security and Privacy
: Discuss any security and privacy concerns that need to be addressed in the design. Consider user authentication, data encryption, and access controls.

#### Database Design

**Entity-relationship diagram (ERD)**

Design Tradeoffs

* We removed an idea for an astrology extension to the database. We planned for the user to input their birthdate and be able to receive information on their sun sign, any planet movements affecting their sign, and other astrology considerations. However, this would've added much more complexity to our database. So, we decided to remove this functionality.

* We also were thinking of having the user input their location, and, in return, they'd receive instructions on how to best view a celestial body or event. This would include things like the angle and direction they must look in. We may still be able to do this for the planets, but it would likely be difficult to do this for other bodies.

Below is an abstract design of the database:
```{mermaid}
%%{init: {'theme':'dark'}}%%
erDiagram
    CELESTIAL-OBJECT }o--o{ EVENT : causes
    CELESTIAL-OBJECT }o--o{ CELESTIAL-OBJECT : linked_to
    OBSERVER }|--|{ CELESTIAL-OBJECT : discovers
    OBSERVER }|--|{ EVENT : discovers
    CELESTIAL-OBJECT }|--|{ LOCATION : viewed_from
    CELESTIAL-OBJECT }|--|{ CELESTIALLOCATION : has
    EVENT }|--|{ LOCATION : viewed_from
```


Celestial Objects and Events

* Our idea is that celestial objects can cause events, although events don't always have to be directly caused by a celestial object or may have a cause we are unsure of. Many objects can cause an event, but some do not. 


Location

* Both events and ojects have locations that they can be seen from Earth. Events and objects can be seen sometimes only in certain hemispheres or regions (like Aurora Borealis). This allows the user to query the database with questions like: What location has the most meteor showers? This requires splitting the Earth into certain zones, so, when coordinates are inputted, they are classified into a certain zone.


Observers

* We also plan to add observers, where an event or object can have multiple, but an observer must discover at least one to be in the database. This way, users can query with questions like: When was the last discovery about Jupiter made? This would also require celestial objects to have other objects linked to them, such as Earth is linked to the moon.


**Relational schemas**
: Below is a list of relations, shown as tables with sample data:

**CelestialObject**

| object_id | object_name      | object_type  | description                                |
|-----------|------------------|--------------|--------------------------------------------|
| 1         | andromeda galaxy | galaxy       | Spiral galaxy visible to the naked eye.   |
| 2         | orion nebula    | nebula        | Emission nebula in the Orion constellation. |
| 3         | jupiter         | planet        | The largest planet in our solar system.    |
| 4         | pleiades        | star cluster  |  Open star cluster in Taurus constellation.  |
| 5         | horsehead nebula | nebula        | Dark nebula in the constellation Orion.    |


**Event**

| event_id | event_name      | date       |
|----------|-----------------|------------|
| 1        | eclipse         | 2023-10-20 |
| 2        | meteor shower   | 2023-11-15 |
| 3        | comet sighting  | 2024-03-05 |
| 4        | supernova observation | 2024-06-12 |
| 5        | planetary conjunction | 2024-08-30 |


**Observer**

| observer_id | first_name  | last_name   |
|------------|-------------|-------------|
| 1          | Astronomer  | One         |
| 2          | Astronomer  | Two         |
| 3          | Astronomer  | Three       |
| 4          | Astronomer  | Four        |
| 5          | Astronomer  | Five        |


**EarthLocation**

| location_id | hemisphere | latitude  | longitude  | UTC    |
|------------|------------|-----------|------------|------- |
| 1          | Northern    | 40.7128   | -74.0060   | UTC-4  |
| 2          | Southern    | 34.0522   | -118.2437  | UTC-7  |
| 3          | Northern    | 51.5074   | -0.1278    | UTC+0  |
| 4          | Southern    | 33.4484   | -112.0740  | UTC-7  |
| 5          | Northern    | 41.8781   | -87.6298   | UTC-5  |


**CelestialLocation**

| cel_location_id | RA        | Dec             |
|------------|-------------- |----------------- |
| 1          | 00h 42m 44s   | +41¬∞ 16' 09"     |
| 2          | 05h 35m 17s   | -05¬∞ 23' 28"     |
| 3          | 20h 22m 38s   | -18¬∞ 40' 48"     |
| 4          | 03h 47m 24s   | +24¬∞ 07' 00"     |
| 5          | 05h 41m 02s   | -02¬∞ 27' 30"     |


Hopefully, using Astronomy Engine, we will be able to turn any location given in longitude and latitude into both Equatorial coordinates and Altitude Azimuth coordinates, as these will help provide the user with instructions to view celestial objects and events.


Below is a list of relationships:

* **CelestialObject-Event**: containing an id, the event_id, the object_id, and the date. One event_id can be related to multiple object_id's, but does not need to be related to any.

* **Event-Location**: containing an id, the event_id, the location_id, and the date. Some events can be seen from multiple locations. Not all events can be viewed from the same location at two different times, so date is important.

* **CelestialObject-Location**: containing an id, the event_id, the location_id, and the date. Some objects can be seen from multiple locations. Not all objects can be viewed from the same location at two different times, so date is important.

* **CelestialObject-CelestialLocation**: containing an id, cel_location_id, object_id, and date. Different types of objects move at different rates, so, based on the date of the last location of an obect, a new entry should be added.

* **Observer-Event**: contains an id, the observer_id, the event_id, and date. An observer must discover at least one event, and can discover multiple.

* **Observer-CelestialObject**: contains an id, the observer_id, the event_id, and date. An observer must discover at least one object, and can discover multiple.

* **CelestialObject-CelestialObject**: contains an id and 2 object_id's. Used for cases like planets with moons, or galaxies with planets. One object can have 0 or more objects related to it.


**Functional Dependencies and Normalization**
: A discussion of the functional dependencies in the proposed database schema, and a demonstration of the  normalization of the relations to BCNF/4NF. This might consist of a description, in a text format, of the process of decomposing the tables extracted from the ERD translation into relations satisfying BCNF/4NF. Note that your decomposition via BCNF/4NF must be lossless.

Specific queries
: Given the context, scope, and perspective, the team should pose 20 distinct questions that the database can help answer. These can be general queries of use to all the users, or specific queries for different users or user roles. These questions should be written in precise words and using relational algebra. Leverage Quarto to write the formulas! 10 each

Note: distinct queries are those that are entirely different. Counterexample: "Display a list of student last names in alphabetical order" is not distinct from "Display a list of student names and email addresses". However, "Display a list of student last names in alphabetical order" is distinct from "Who are the five students with the highest GPA?‚Äù


#### Project Management

``` {mermaid}
%%{init: {'theme':'dark'}}%%
gantt
    title Semester Project Timeline
    dateFormat YYYY-MM-DD
    Deliverable 4 Due : milestone, m1, 2023-10-15, 0d
    Deliverable 5 Due : milestone, m1, 2023-11-03, 0d
    Deliverable 6 Due : milestone, m1, 2023-11-17, 0d
    Semester Project Due : milestone, m1, 2023-12-12, 0d
    section Tasks
        Database Development:a1, 2023-10-15, 12d
        Status Report    :a2, 2023-10-27, 7d
        API Development  :after a2, 14d
        Status Report    :a3, 2023-11-10, 7d
        Finishing Touches:a4, 2023-11-27, 15d
        Final Report     :a5, 2023-12-5, 7d
```

In this chart, there are milestones of when the project deliverables are due and a loose timeline of what we'll work on and when. We'll use the status report deliverables as goals for finishing certain aspects of development. 

A lot of the development is based on when we cover topics in class. Generally, during database development, we'll set up the database and implement queries. Then, during API development, we'll develop a client program to interact with the database.