---
title-block-banner: cropped.jpg
title: Astronomy Database 
date: October 9, 2023
authors: üåü Uma Manicka & Celeste Olmstead üåü
format:
    html:
        theme: cyborg
        toc: false
        embed-resources: true
        linkcolor: pink
---



#### ü™êProject Overviewü™ê 


See:

* [GITHUB REPO](https://github.com/cmsc-vcu/cmsc508-fa2023-prj-astronomy_database_group53)
* [PITCH VIDEO](https://clipchamp.com/watch/5yb3Z2ORm1g?utm_source=share&utm_medium=social&utm_campaign=watch)
* [DESIGN VIDEO]()


#### Problem Description

Problem domain
: provide summary of the problem domain, providing context, scope of the area. For example, one might talk about the building murals in Richmond, and provide a bit of history (or pictures), so that someone understands the problem domain.

Need
: provide a summary on why a database is needed, and what problem it might help solve. Why does this database need to be developed?

Context, scope and perspective
: Who is the DB for, or what perspective will the DB represent? In the domain of sports teams, is the database for the coach, team owner, player, or fan?

User roles and use cases
: Identify the different user roles that will interact with the database. Describe their needs and how they will use the database. How will the database be used? Who will be using it? How will they be using it? How will the database be connected to other things? 

Security and Privacy
:  Discuss any security and privacy concerns that need to be addressed in the design. Consider user authentication, data encryption, and access controls.

#### Database Design

Entity-relationship diagram (ERD)
: One design tradeoff we've had to make during this design process is removing an astrology extension to the database. We planned for the user to input their birthdate and be able to receive information on their sun sign, any planet movements affecting their sign, and other astrology considerations. However, this would've added much more complexity to our database. So, we decided to remove this functionality.

We also were thinking of having the user input their location, and, in return, they'd receive instructions on how to best view a celestial body or event. This would include things like the angle and direction they must look in. We may still be able to do this for the planets, but it would likely be difficult to do this for other bodies.

Below is a low-level design of the database:
```{mermaid}
---
title: Astronomy Database
---
erDiagram
    CELESTIAL-OBJECT }o--o{ EVENT : causes
    DISCOVERER }|--|{ CELESTIAL-OBJECT : discovers
    DISCOVERER }|--|{ EVENT : discovers
    CELESTIAL-OBJECT }|--|{ LOCATION : has
    EVENT }|--|{ LOCATION : has
```

Our idea is that celestial objects can cause events, although events don't always have to be directly caused by a celestial object, or may have a cause we are unsure of. Many objects can cause an event, but some do not. Both events and ojects have locations that they can be seen from on Earth. Events and objects can be seen sometimes only in certain hemispheres or regions (like Aurora Borealis). This allows the user to query the database with questions like: what location has the most meteor showers? This requires splitting the Earth into certain zones, so, when coordinates are inputted, they are classified into a certain zone.

Relational schemas
: Listing of relations, their attributes, types, domain, and constraints, identification of the primary key and foreign keys and other constraints.

Functional Dependencies and Normalization
: A discussion of the functional dependencies in the proposed database schema, and a demonstration of the  normalization of the relations to BCNF/4NF. This might consist of a description, in a text format, of the process of decomposing the tables extracted from the ERD translation into relations satisfying BCNF/4NF. Note that your decomposition via BCNF/4NF must be lossless.

Specific queries
: Given the context, scope, and perspective, the team should pose 20 distinct questions that the database can help answer. These can be general queries of use to all the users, or specific queries for different users or user roles. These questions should be written in precise words and using relational algebra. Leverage Quarto to write the formulas! 10 each

Note: distinct queries are those that are entirely different. Counterexample: "Display a list of student last names in alphabetical order" is not distinct from "Display a list of student names and email addresses". However, "Display a list of student last names in alphabetical order" is distinct from "Who are the five students with the highest GPA?‚Äù

Sample Data
: Sample data for each relation your design documented above. I‚Äôm looking for 5-10 tuples in each relation, to clearly communicate the domains of each attribute. I suggest that you use chatgpt to help create the tables.  NOTE - results from chatgpt are formatted in markdown, so if you ask chatgpt to produce a table of values with specific columns, you can cut/paste this directly into quarto and get a pretty table!


#### Project Management

``` {mermaid}
%%{init: {'theme':'dark'}}%%
gantt
    title Semester Project Timeline
    dateFormat YYYY-MM-DD
    Deliverable 4 Due : milestone, m1, 2023-10-15, 0d
    Deliverable 5 Due : milestone, m1, 2023-11-03, 0d
    Deliverable 6 Due : milestone, m1, 2023-11-17, 0d
    Semester Project Due : milestone, m1, 2023-12-12, 0d
    section Tasks
        Database Development:a1, 2023-10-15, 12d
        Status Report    :a2, 2023-10-27, 7d
        API Development  :after a2, 14d
        Status Report    :a3, 2023-11-10, 7d
        Finishing Touches:a4, 2023-11-27, 15d
        Final Report     :a5, 2023-12-5, 7d
```

In this chart, there are milestones of when the project deliverables are due and a loose timeline of what we'll work on and when. We'll use the status report deliverables as goals for finishing certain aspects of development. 

A lot of the development is based on when we cover topics in class. Generally, during database development, we'll set up the database and implement queries. Then, during API development, we'll develop a client program to interact with the database.